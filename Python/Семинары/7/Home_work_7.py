# Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм.
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, Вам стоит написать программу.
# Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое.
# Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами.
# Фразы отделяются друг от друга пробелами.
# Стихотворение  Винни-Пух передаст вам автоматически в переменную stroka в виде строки.
# В ответе напишите Парам пам-пам, если с ритмом все в порядке и Пам парам, если с ритмом все не в порядке.
# Если фраза только одна, то ритм определить не получится и необходимо вывести: Количество фраз должно быть больше одной!.

# stroka = "мо-локо и мёд"
# stroka = stroka.split()
# print(stroka)
# res = []
# # print(len(stroka))
# if len(stroka) <= 1:
#     print("Количество фраз должно быть больше одной!")
# else:
#     for i in stroka:
#         count = 0
#         for j in i:
#             for k in "ауоыиэяюёе":
#                 if j == k:
#                     count += 1
#     res.append(count)
#     print(res)
#     if min(res) == max(res):
#         print("Парам пам-пам")
#     else:
#         print("Пам парам")
# def rhythm(poem):
#     poem = poem.split()
#     f = lambda word: sum(1 for i in word if i in 'аеёиоуыэюя')
#     sum_word = f(poem[0])
#     return all([f(i) == sum_word for i in poem])
#
# poem = str(input("Введите стихотворение: "))
#
# if rhythm(poem):
#     print('Парам пам-пам')
# else:
#     print('Пам парам')

# /////////////////////////////

# Напишите функцию print_operation_table(operation, num_rows, num_columns),
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца.
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).
# Если строк меньше двух, выдайте текст
# ОШИБКА! Размерности таблицы должны быть больше 2!.
# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, у операции умножения.

# Задача No49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь.
# \Напишите функцию find_farthest_orbit(list_of_orbits),
# которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета.
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет,
# зато искусственные спутники были были запущены на круговые орбиты.
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой
# далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса.
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса.
# При решении задачи используйте списочные выражения.
# Подсказка: проще всего будет найти эллипс в два шага:
# сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна

#
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (40, 40)]
# def find_farthest_orbit(orb):
#     orb = list(filter(lambda x: x[0] != x[1], orb))
#     print(orb)
#     for i in orb:
#         if i[0] * i[1] == max(list(map(lambda x: x[0] * x[1], orb))):
#             return i
#
# print(find_farthest_orbit(orbits))
#
# print(max(orbits, key=lambda x: x[0] * x[1] * (x[0] != x[1])))


# numbers = "2 12 -4 77 -38 8"
# print(list(filter(lambda x: (len(str(abs(x))) == 2), map(int, numbers.split(" ")))))